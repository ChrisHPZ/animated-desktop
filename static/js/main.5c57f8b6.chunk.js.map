{"version":3,"sources":["components/Clock.js","components/Weather.js","components/Time.js","components/Moon.js","App.js","reportWebVitals.js","index.js"],"names":["Clock","useState","clockState","setClockState","currentDate","setCurrentDate","currentMonth","setCurrentMonth","currentDay","setCurrentDay","useEffect","setInterval","date","Date","toLocaleTimeString","today","toLocaleString","weekday","month","getDate","className","font","fontSize","color","navigator","geolocation","getCurrentPosition","position","console","log","coords","latitude","longitude","Weather","props","state","loading","tempurature","a","url","process","fetch","response","json","data","this","setState","current","style","temp_f","condition","text","src","icon","alt","Component","TimeOfDay","hourState","setHourState","hour","getHours","margin","Moon","astronomy","Provider","value","size","astro","moon_phase","React","App","Time","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5c57f8b6.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nfunction Clock() {\r\n\t// Actual clock component\r\n\tconst [clockState, setClockState] = useState();\r\n\r\n\t// Current day, month and date\r\n\tconst [currentDate, setCurrentDate] = useState();\r\n\tconst [currentMonth, setCurrentMonth] = useState();\r\n\tconst [currentDay, setCurrentDay] = useState();\r\n\t\r\n\tuseEffect(() => {\r\n\t\tsetInterval(() => {\r\n\t\t\tconst date = new Date();\r\n\t\t\tsetClockState(date.toLocaleTimeString());\r\n\t\t}, 1000);\r\n\t}, [])\r\n\r\n\tuseEffect(() => {\r\n\t\tconst today = new Date();\r\n\t\tsetCurrentDate(today.toLocaleString(\"default\", { weekday: \"long\" } ));\r\n\t\tsetCurrentMonth(today.toLocaleString( \"default\", { month: \"long\" }));\r\n\t\tsetCurrentDay(today.getDate());\r\n\t}, [])\r\n\r\n\treturn(\r\n\t\t<div>\r\n\t\t\t<p className=\"time\">{clockState}</p>\r\n\t\t\t<p className=\"date\">{currentDate}, {currentMonth} {currentDay}</p>\r\n\t\t</div>\r\n\t)\r\n}\r\nexport default Clock","import React, { Component } from 'react';\r\nimport { Circles } from 'react-loading-icons';\r\n\r\nconst API_KEY = process.env.REACT_APP_API_KEY;\r\nconst font = {\r\n\tfontSize: 30,\r\n\tcolor: \"#ffffff\"\r\n}\r\n\r\nnavigator.geolocation.getCurrentPosition(function(position) {\r\n\tconsole.log(position);\r\n\treturn [position.coords.latitude,position.coords.longitude];\r\n});\r\n\r\nclass Weather extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tloading: true,\r\n\t\t\ttempurature: null\r\n\t\t}\r\n\t}\r\n\r\n\tasync componentDidMount() {\r\n\t\tconst url = `http://api.weatherapi.com/v1/current.json?key=${API_KEY}&q=44212&aqi=no`;\r\n\t\tconst response = await fetch(url);\r\n\t\tconst data = await response.json();\r\n\t\tthis.setState({tempurature: data.current, loading: false});\r\n\t}\r\n  \r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"weather\">\r\n\t\t\t\t{this.state.loading || !this.state.tempurature ? (\r\n\t\t\t\t\t<div style={font}><Circles /></div> \r\n\t\t\t\t) : (\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<div style={font}>\r\n\t\t\t\t\t\t\t{this.state.tempurature.temp_f}&#176;\t\t\t\t\t\t\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<p className=\"date small\">{this.state.tempurature.condition.text}</p>\r\n\t\t\t\t\t\t<img src={this.state.tempurature.condition.icon} alt=\"icon\" />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n  \r\nexport default Weather;","import React, { useEffect, useState } from 'react';\r\n\r\nfunction TimeOfDay() {\r\n\tconst [hourState, setHourState] = useState();\r\n\tuseEffect(() => {\r\n\t\tconst hour = new Date();\r\n\t\tsetHourState(hour.getHours());\r\n\t}, [])\r\n\treturn(\r\n\t\t<div className=\"time-of-day\">\r\n\t\t\t<p className=\"date small\">{hourState < 12 ? \"Good Morning\" : hourState < 18 ? \"Good Afternoon\" : \"Good Evening\"}</p>\t\t\t\r\n\t\t</div>\r\n\t)\r\n}\r\nexport default TimeOfDay;","import React from 'react';\r\nimport { Circles } from 'react-loading-icons';\r\nimport { IconContext } from 'react-icons';\r\nimport { WiMoonAltWaningGibbous3 } from 'react-icons/wi'\r\n\r\nconst style = {\r\n\tmargin: \"0 auto\"\r\n}\r\nconst API_KEY = process.env.REACT_APP_API_KEY;\r\nclass Moon extends React.Component {\r\n\t\r\n\tstate = {\r\n\t\tloading: true,\r\n\t\tastronomy: null\r\n\t}\r\n\r\n\tasync componentDidMount() {\r\n\t\tconst url = `http://api.weatherapi.com/v1/astronomy.json?key=${API_KEY}&q=44212&aqi=no`;\r\n\t\tconst response = await fetch(url);\r\n\t\tconst data = await response.json();\r\n\t\tthis.setState({ astronomy: data.astronomy, loading: false});\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn(\r\n\t\t\t<IconContext.Provider value={{ color: \"white\", size:\"100px\" }}>\r\n\t\t\t\t{this.state.loading || !this.state.astronomy ? (\r\n\t\t\t\t\t<div><Circles /></div>\r\n\t\t\t\t) : ( \r\n\t\t\t\t\t<div className=\"moon-phase\">\r\n\t\t\t\t\t\t<WiMoonAltWaningGibbous3 style={style} />\r\n\t\t\t\t\t\t<p className=\"date small\">{this.state.astronomy.astro.moon_phase}</p>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)}\t\t\t\t\r\n\t\t\t</IconContext.Provider>\r\n\t\t)\r\n\t}\t\r\n}\r\n\r\nexport default Moon;","import Clock from './components/Clock';\nimport Weather from './components/Weather';\nimport TimeOfDay from './components/Time';\nimport Moon from './components/Moon'\nimport './App.css';\n\nfunction App() {\n  return (\n\t<>\n\t\t<div className=\"columns\">\n\t\t\t<div className=\"flex-item\">\n\t\t\t\t<Weather />\n\t\t\t\t<TimeOfDay />\n\t\t\t\t<Moon />\n\t\t\t</div>\t\t\n\t\t</div>\n\t\t<div className=\"absolute\">\n\t\t\t<Clock />\n\t\t</div>\n\t</>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}